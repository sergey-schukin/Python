# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление
# клеток, соответственно.
# Сложение.Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, cell):
        self._cell = cell

    def __add__(self, other):
        return Cell(self._cell + other._cell)

    def __sub__(self, other):
        if self._cell > other._cell:
            return Cell(self._cell - other._cell)
        return f"{self._cell} - {other._cell}: неверная операция"

    def __mul__(self, other):
        return Cell(self._cell * other._cell)

    def __truediv__(self, other):
        try:
            return Cell(self._cell // other._cell)
        except ZeroDivisionError:
            return 'Ошибка. На ноль делить нельзя'

    def make_order(self, row):
        rows = self._cell // row
        tail = self._cell % row
        return '\n'.join(['*' * row] * rows + (['*' * tail] if tail else []))

    def __str__(self):
        return f"Клетка состоит из {self._cell} ячеек"


cell_1 = Cell(27)
print(cell_1)
cell_2 = Cell(2)
print(cell_2)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_2 - cell_1)
print(cell_2 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print((cell_1 + cell_2).make_order(7))
