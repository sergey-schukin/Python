# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

class NotNumberError(Exception):
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return self.text


def check_digit(num):
    try:
        float(num)
        return True
    except ValueError:
        return False


my_list = []

while True:
    user_input = input("Введите число для заполнения списка, или 'stop' для выхода: ")

    if user_input == "stop":
        break

    try:
        if check_digit(user_input):
            my_list.append(float(user_input))
        else:
            raise NotNumberError(f"'{user_input}' has not numerical format")

    except NotNumberError as e:
        print(e)

print(my_list)
